#RequireContext CSmMapType
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

declare Text Rules;

/* -------------------------------------- */
// Check if the map is valid
Void UpdateValidability() {
	declare NbGoal1 = 0;
	declare NbGoal2 = 0;
	declare NbSpawn1 = 0;
	declare NbSpawn2 = 0;
	foreach(Data in AnchorData) {
		if(Data.Tag != "Spawn" && Data.Tag != "Goal") Data.Tag = "Goal";
		if(Data.Order != 1 && Data.Order != 2) Data.Order = 1;
		
		if (Data.Tag == "Goal" && Data.Order == 1) NbGoal1 += 1;
		if (Data.Tag == "Goal" && Data.Order == 2) NbGoal2 += 1;
		if (Data.Tag == "Spawn" && Data.Order == 1) NbSpawn1 += 1;
		if (Data.Tag == "Spawn" && Data.Order == 2) NbSpawn2 += 1;
	}
	
	Anchor::UpdateAnchorCounts();	
	
	if (NbGoal2 < 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place at least on goal #2");
		return;
	}
	
	if (NbGoal1 != 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly one goal #1");
		return;
	}
	
	if(NbSpawn1 < 1 || NbSpawn2 < 1)
	{
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place at least one spawn per team.");
		return;
	}
	
	ValidationStatus = CSmMapType::ValidationStatus::Validated;	
}

/* -------------------------------------- */
// Return the manialink for anchor edition
Text EditAnchorManialink(Text _Tag) {
	
	declare MLText = 		
	"""
	<script><!--
		#Include "TextLib" as TextLib
		
		main() {
			declare Buttons = [
			(Page.GetFirstChild("1") as CMlLabel), 
			(Page.GetFirstChild("2") as CMlLabel)];
			
			declare Integer AnchorOrder for Page;
			declare Text	AnchorTag for Page;
			declare Boolean Finish for Page;
			Finish = False;	
			while(!Finish) {
				yield;
				foreach(Button in Buttons) {
					if(AnchorOrder == TextLib::ToInteger(Button.ControlId))
						Button.Value = "$090"^Button.ControlId;
					else 
						Button.Value = "$fff"^Button.ControlId;
				}
				
				foreach(Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							if (Event.ControlId != "Cancel") AnchorOrder = TextLib::ToInteger(Event.ControlId);
							Finish = True;
						}	
					}
				}
			}
		}			
	--></script>
	<frame posn="120 35">
		<quad posn="0 0 -1" sizen="70 23" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fff{{{_("Edit")^" "^_Tag}}}" />
		<frame posn="0 -4">
			<label id="1" posn="-10 0" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="2" posn="10 0" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
		</frame>
		<label id="Cancel" text="{{{_("Cancel")}}}" posn="0 -13" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
    </frame>
	<frame posn="120 -3">
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fff{{{_("Rules")}}}" />
		<quad posn="0 0 -1" sizen="70 30" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-30 -4">
			<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" text="$222{{{ Rules }}}" />
		</frame>
	</frame>
	""";
  
	return MLText;
}

/* -------------------------------------- */
// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId)
{	
	UpdateValidability();
	/*if(AnchorData[_EditedAnchorDataId].Order == 1) 
		AnchorData[_EditedAnchorDataId].Order = 2;
	else
		AnchorData[_EditedAnchorDataId].Order = 1;*/
	declare Integer AnchorOrder for ManialinkPage;
	declare Boolean Finish for ManialinkPage;
	ManialinkText = EditAnchorManialink(AnchorData[_EditedAnchorDataId].Tag);
	AnchorOrder = AnchorData[_EditedAnchorDataId].Order;
	Finish = False;
	while(!Finish) {
		yield;
	}
	AnchorData[_EditedAnchorDataId].Order = AnchorOrder;
	
	UpdateValidability();
}

/* -------------------------------------- */
// Main
/* -------------------------------------- */

main() {		
	UpdateValidability();
	CustomEditAnchorData = True;
	Rules = _("You must place at least one spawn per team.\nYou must place exactly on goal #1.\nYou must not place any goal #2");	
	while (True) {	
		yield;
		ManialinkText = "";			
		foreach(Event in PendingEvents) {
			if(Event.Type == CPluginEvent::Type::MapModified) {
				UpdateValidability();			
			} else if(Event.Type == CPluginEvent::Type::EditAnchor) {
				EditAnchorData(Event.EditedAnchorDataId);
			}
		}		
	}	
}
