#RequireContext CSmMapType
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Anchor.Script.txt" as Anchor

declare Text Rules;

/* -------------------------------------- */
// Check if the map is valid
Void UpdateValidability() {
	declare NbGoal1 = 0;
	declare NbGoal2 = 0;
	declare NbSpawn1 = 0;
	declare NbSpawn2 = 0;
	foreach(Data in AnchorData) {
		if(Data.Tag != "Spawn" && Data.Tag != "Goal" && Data.Tag != "Pickup") Data.Tag = "Goal";
		if (Data.Order < 1 || Data.Order > 32) Data.Order = 1;
		
		if (Data.Tag == "Goal" && Data.Order == 1) NbGoal1 += 1;
		if (Data.Tag == "Goal" && Data.Order == 2) NbGoal2 += 1;
		if (Data.Tag == "Spawn" && (Data.Order - 1) % 2 == 0) NbSpawn1 += 1;
		if (Data.Tag == "Spawn" && (Data.Order - 1) % 2 == 1) NbSpawn2 += 1;
	}
	
	Anchor::UpdateAnchorCounts();	
	if (NbSpawn1 < 1 || NbSpawn2 < 1)
	{
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place at least one spawn per team");
		return;
	}
	if (NbGoal1 != 1 || NbGoal2 != 1) {
		ValidationStatus = CSmMapType::ValidationStatus::NotValidable;
		ValidabilityRequirementsMessage = _("You must place exactly one goal per team");
		return;
	}
	
	ValidationStatus = CSmMapType::ValidationStatus::Validated;
}

/* -------------------------------------- */
// Return the manialink for anchor edition
Text EditAnchorManialink(Text _Tag) {
	
	declare MLText = 		
	"""
	<script><!--
		#Include "TextLib" as TextLib
		
		Text GetPickupForId(Integer Id)
		{
			if (Id == 1)
			{
				return "Rocket";
			}
			else if (Id == 2)
			{
				return "Laser";
			}
			else if (Id == 3)
			{
				return "Nucleus";
			}
			else if (Id == 4)
			{
				return "Arrow";
			}
			else if (Id == 5)
			{
				return "Armor";
			}
			else
			{
				return "DoubleDamage";
			}
			
			return "Unknown";
		}
		
		main() {
			declare Buttons = [
			(Page.GetFirstChild("1") as CMlLabel), 
			(Page.GetFirstChild("2") as CMlLabel), 
			(Page.GetFirstChild("3") as CMlLabel)];
			declare PickupTypeButton = (Page.GetFirstChild("PickupType") as CMlLabel);
			
			declare Integer AnchorOrder for Page;
			declare Text	AnchorTag for Page;
			declare Boolean Finish for Page;
			declare OldOrder = AnchorOrder;
			declare Boolean Team2;
			declare CanPickup = False;
			declare Pickup = False;
			declare PickupType = AnchorOrder;
			Finish = False;""";
			if (_Tag == "Spawn")
			{
			MLText ^= """
			declare AllowRocketButton = (Page.GetFirstChild("AllowRocket") as CMlQuad);
			declare AllowLaserButton = (Page.GetFirstChild("AllowLaser") as CMlQuad);
			declare AllowNucleusButton = (Page.GetFirstChild("AllowNucleus") as CMlQuad);
			declare AllowArrowButton = (Page.GetFirstChild("AllowArrow") as CMlQuad);
			declare Boolean AllowRocket;
			declare Boolean AllowLaser;
			declare Boolean AllowNucleus;
			declare Boolean AllowArrow;
			
			declare Data = AnchorOrder - 1;
			
			if (Data >= 16)
			{
				AllowArrow = True;
				Data -= 16;
			}
			else
			{
				AllowArrow = False;
			}
			
			if (Data >= 8)
			{
				AllowNucleus = True;
				Data -= 8;
			}
			else
			{
				AllowNucleus = False;
			}
			
			if (Data >= 4)
			{
				AllowLaser = True;
				Data -= 4;
			}
			else
			{
				AllowLaser = False;
			}
			
			if (Data >= 2)
			{
				AllowRocket = True;
				Data -= 2;
			}
			else
			{
				AllowRocket = False;
			}
			
			if (!AllowRocket)
			{
				AllowRocketButton.Substyle = "LvlRed";
			}
			
			if (!AllowLaser)
			{
				AllowLaserButton.Substyle = "LvlRed";
			}
			
			if (!AllowNucleus)
			{
				AllowNucleusButton.Substyle = "LvlRed";
			}
			
			if (!AllowArrow)
			{
				AllowArrowButton.Substyle = "LvlRed";
			}
			
			Team2 = Data >= 1;""";
			}
			else
			{
				MLText ^= """
				Team2 = AnchorOrder == 2;
				CanPickup = True;
				Pickup = AnchorTag == "Pickup";
				""";
			}
			MLText ^= """
			while(!Finish) {
				yield;
				if (CanPickup)
				{
					Buttons[2].Value = "$fffPickup";
				}
				if (!Pickup)
				{
					PickupType = 0;
					if (Team2)
					{
						Buttons[0].Value = "$fff1";
						Buttons[1].Value = "$0902";
					}
					else
					{
						Buttons[0].Value = "$0901";
						Buttons[1].Value = "$fff2";
					}
				}
				else
				{
					Buttons[0].Value = "$fff1";
					Buttons[1].Value = "$fff2";
					Buttons[2].Value = "$090Pickup";
					PickupTypeButton.Value = "$fff" ^ GetPickupForId(PickupType);
				}
				
				foreach(Event in PendingEvents) {
					switch(Event.Type){
						case CMlEvent::Type::MouseClick : {
							if (Event.ControlId == "1")
							{
								Team2 = False;
								Pickup = False;
								PickupTypeButton.Value = "";
							}
							else if (Event.ControlId == "2")
							{
								Team2 = True;
								Pickup = False;
								PickupTypeButton.Value = "";
							}
							else if (Event.ControlId == "3")
							{
								Pickup = True;
								PickupType = 1;
								PickupTypeButton.Value = "$fff" ^ GetPickupForId(PickupType);
							}
							else if (Event.ControlId == "PickupType")
							{
								PickupType += 1;
								if (PickupType > 6)
								{
									PickupType = 1;
								}
								PickupTypeButton.Value = "$fff" ^ GetPickupForId(PickupType);
							}
							else if (Event.ControlId == "Cancel")
							{
								AnchorOrder = OldOrder;
								Finish = True;
							}""";
							if (_Tag == "Spawn")
							{
								MLText ^= """
							else if (Event.ControlId == "AllowRocket")
							{
								AllowRocket = !AllowRocket;
								if (AllowRocket)
								{
									AllowRocketButton.Substyle = "LvlGreen";
								}
								else
								{
									AllowRocketButton.Substyle = "LvlRed";
								}
							}
							else if (Event.ControlId == "AllowLaser")
							{
								AllowLaser = !AllowLaser;
								if (AllowLaser)
								{
									AllowLaserButton.Substyle = "LvlGreen";
								}
								else
								{
									AllowLaserButton.Substyle = "LvlRed";
								}
							}
							else if (Event.ControlId == "AllowNucleus")
							{
								AllowNucleus = !AllowNucleus;
								if (AllowNucleus)
								{
									AllowNucleusButton.Substyle = "LvlGreen";
								}
								else
								{
									AllowNucleusButton.Substyle = "LvlRed";
								}
							}
							else if (Event.ControlId == "AllowArrow")
							{
								AllowArrow = !AllowArrow;
								if (AllowArrow)
								{
									AllowArrowButton.Substyle = "LvlGreen";
								}
								else
								{
									AllowArrowButton.Substyle = "LvlRed";
								}
							}
							else if (Event.ControlId == "Ok")
							{
								AnchorOrder = 1;
								if (Team2)
								{
									AnchorOrder += 1;
								}
								if (AllowRocket)
								{
									AnchorOrder += 2;
								}
								if (AllowLaser)
								{
									AnchorOrder += 4;
								}
								if (AllowNucleus)
								{
									AnchorOrder += 8;
								}
								if (AllowArrow)
								{
									AnchorOrder += 16;
								}
								Finish = True;
							}""";
							}
							else
							{
								MLText ^= """
							else if (Event.ControlId == "Ok")
							{
								if (!Pickup)
								{
									if (Team2)
									{
										AnchorTag = "Goal";
										AnchorOrder = 2;
									}
									else
									{
										AnchorTag = "Goal";
										AnchorOrder = 1;
									}
								}
								else
								{
									AnchorOrder = PickupType;
									AnchorTag = "Pickup";
								}
								Finish = True;
							}
								""";
							}
							MLText ^= """
						}	
					}
				}
			}
		}	
	--></script>
	<frame posn="120 35">
		<quad posn="0 0 -1" sizen="70 53" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fff{{{_("Edit")^" "^_Tag}}}" />
		<frame posn="0 -4">
			<label id="1" posn="-10 0" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="2" posn="10 0" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true"/>
			<label id="3" posn="0 -10" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true" />
			<label id="PickupType" posn="0 -20" scale="2" halign="center" style="TextButtonMedium" ScriptEvents="true" />
		</frame>""";
		if (_Tag == "Spawn")
		{
			MLText ^= """
		<label text="Rocket:" posn="-30 -12" style="TextButtonMedium" />
		<label text="Laser:" posn="-30 -17" style="TextButtonMedium" />
		<label text="Nucleus:" posn="-30 -22" style="TextButtonMedium" />
		<label text="Arrow:" posn="-30 -27" style="TextButtonMedium" />
		<quad id="AllowRocket" posn="-7 -13" style="Icons64x64_1" substyle="LvlGreen" sizen="5 5" halign="center" valign="center" ScriptEvents="true" />
		<quad id="AllowLaser" posn="-7 -18" style="Icons64x64_1" substyle="LvlGreen" sizen="5 5" halign="center" valign="center" ScriptEvents="true" />
		<quad id="AllowNucleus" posn="-7 -23" style="Icons64x64_1" substyle="LvlGreen" sizen="5 5" halign="center" valign="center" ScriptEvents="true" />
		<quad id="AllowArrow" posn="-7 -28" style="Icons64x64_1" substyle="LvlGreen" sizen="5 5" halign="center" valign="center" ScriptEvents="true" />""";
		}
		MLText ^= """
		<label id="Ok" text="OK" posn="0 -35" halign="center" style="CardButtonSmall" ScriptEvents="true" />
		<label id="Cancel" text="{{{_("Cancel")}}}" posn="0 -43" halign="center" style="CardButtonSmall" ScriptEvents="true"/>
    </frame>
	<frame posn="120 -33">
		<quad posn="0 0 2" sizen="74 15" halign="center" valign="bottom" style="Bgs1InRace" substyle="BgTitle3_5"/>
		<label posn="0 5 3" halign="center" valign="bottom" style="TextTitle3" text="$fff{{{_("Rules")}}}" />
		<quad posn="0 0 -1" sizen="70 30" halign="center" style="Bgs1" substyle="BgWindow2"/>
		<frame posn="-30 -4">
			<label posn="0 0" sizen="60 5" autonewline="1" style="TextCardSmallScores2" text="$222{{{ Rules }}}" />
		</frame>
	</frame>
	""";
  
	return MLText;
}

/* -------------------------------------- */
// Show the anchor edition manialink
Void EditAnchorData(Ident _EditedAnchorDataId)
{	
	UpdateValidability();
	/*if(AnchorData[_EditedAnchorDataId].Order == 1) 
		AnchorData[_EditedAnchorDataId].Order = 2;
	else
		AnchorData[_EditedAnchorDataId].Order = 1;*/
	declare Integer AnchorOrder for ManialinkPage;
	declare Text AnchorTag for ManialinkPage;
	declare Boolean Finish for ManialinkPage;
	ManialinkText = EditAnchorManialink(AnchorData[_EditedAnchorDataId].Tag);
	AnchorOrder = AnchorData[_EditedAnchorDataId].Order;
	AnchorTag = AnchorData[_EditedAnchorDataId].Tag;
	Finish = False;
	while(!Finish) {
		yield;
	}
	AnchorData[_EditedAnchorDataId].Order = AnchorOrder;
	AnchorData[_EditedAnchorDataId].Tag = AnchorTag;
	
	UpdateValidability();
}

Text GetDefaultManialink()
{
	return """<frame posn="-110 85"><quad style="UIConstructionSimple_Buttons" substyle="Stats" sizen="16 16" scriptevents="true" id="waypoints" />
	<label id="infoLabel" style="TextTips" halign="center" posn="8 -17" hidden="1">Toggle Path Mode</label></frame>
	<script><!--
		main()
		{
			declare Boolean IntendsPathMode for Page;
			declare InfoLabel = Page.GetFirstChild("infoLabel");
			while (True)
			{
				foreach (Event, PendingEvents)
				{
					if(Event.Type == CMlEvent::Type::MouseClick)
					{
						IntendsPathMode = !IntendsPathMode;
					}
					else if (Event.Type == CMlEvent::Type::MouseOver)
					{
						InfoLabel.Show();
					}
					else if (Event.Type == CMlEvent::Type::MouseOut)
					{
						InfoLabel.Hide();
					}
				}
				yield;
			}
		}
	//--></script>
	""";
}

/* -------------------------------------- */
// Main
/* -------------------------------------- */

main() {		
	declare IntendsPathMode for ManialinkPage = False;
	declare LastMode = CEditorPlugin::PlaceMode::Block;
	UpdateValidability();
	CustomEditAnchorData = True;
	Rules = _("You must place at least one Spawn #1 and one Spawn #2.\nYou must place exactly one goal for each team.");	
	while (True) {	
		yield;
		ManialinkText = GetDefaultManialink();
		if (IntendsPathMode && PlaceMode != CEditorPlugin::PlaceMode::Path)
		{
			LastMode = PlaceMode;
			PlaceMode = CEditorPlugin::PlaceMode::Path;
		}
		else if (!IntendsPathMode && PlaceMode == CEditorPlugin::PlaceMode::Path)
		{
			PlaceMode = LastMode;
		}
		foreach(Event in PendingEvents) {
			if(Event.Type == CPluginEvent::Type::MapModified) {
				UpdateValidability();			
			} else if(Event.Type == CPluginEvent::Type::EditAnchor) {
				EditAnchorData(Event.EditedAnchorDataId);
			}
		}		
	}	
}
