#RequireContext CSmMode 

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/Mode.Script.txt"

#Include "Libs/Nadeo/Victory.Script.txt" as Victory
#Include "Libs/Nadeo/Top.Script.txt" as Top
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/Airshot.Script.txt" as Airshot
#Include "Libs/Nadeo/ShootMania/BalancedWeapons.Script.txt" as BalancedWeapons

#Setting	RespawnTime					6001
#Setting	TimeLimit					900000
#Setting	ScoreLimit					360

#Setting	RoundsToWin					3
#Setting	RoundGapToWin				1
#Setting	RoundsLimit					5

#Setting	AutoBalance					True
#Setting	CaptureTime					5000
#Setting	ScoreTickTime				3000
#Setting	ScorePerTick				3
#Setting	GoalMarker					True

#Setting	CaptureScore				10
#Setting	DamageScore					1

#Const		CompatibleMapTypes			"DominationArena" 
#Const		Version						"2012-08-21"
#Const		VersionNum					"1.2"
#Const		UITickPeriod				200

***UIPlayer***
***
UI.BigMessageSound = CUIConfig::EUISound::Notice;
UI.BigMessage = Airshot::Message(Player);
***

***EndTime***
***
EndTime = StartTime + TimeLimit;
***

***Rules***
***
declare ModeName = "Domination";
declare ModeRules = TextLib::Compose(_("Two teams\n\n- Each team tries to capture the poles.\n- If your team owns a pole it gets score every second.\n -The first team to reach the score limit (%1 Points) wins.\n"), TextLib::ToText(ScoreLimit));
***

declare Ident[][Integer] G_BlockSpawnQueue;	///< A list of spawn points to use
declare Integer[Integer] MapSidesIndices;

Void UpdateBlockSpawnQueue(Integer clan) {	
	foreach (BlockSpawn in BlockSpawns) {
		if (BlockSpawn.Order <= 1 && clan == 1)	G_BlockSpawnQueue[1].add(BlockSpawn.Id);
		else if (BlockSpawn.Order >= 2 && clan == 2) G_BlockSpawnQueue[2].add(BlockSpawn.Id);
	}
}

Void _SpawnPlayer(CSmPlayer Player, Integer time)
{
	if (G_BlockSpawnQueue[MapSidesIndices[Player.RequestedClan]].count < 1)
		UpdateBlockSpawnQueue(MapSidesIndices[Player.RequestedClan]);
	declare SpawnId = G_BlockSpawnQueue[MapSidesIndices[Player.RequestedClan]][MathLib::Rand(0, G_BlockSpawnQueue[MapSidesIndices[Player.RequestedClan]].count - 1)];
	declare Tmp = G_BlockSpawnQueue[MapSidesIndices[Player.RequestedClan]].remove(SpawnId);
	
	SM::SpawnPlayer(Player, Player.RequestedClan, BlockSpawns[SpawnId], time);
}

/* ------------------------------------- */
/** Get the map name manialink string.
 *
 * @return		The manialink string
 */
Text UpdateLayerSpawnScreen() {
	declare Text ML;
	
	---Rules---
	
	ML = """
		<script><!--
			main () {
				declare FrameRules	<=> Page.GetFirstChild("FrameRules");
				declare FrameShow	<=> Page.GetFirstChild("FrameShow");
				declare ShowRules = False;
					
				while(True) {
					if (ShowRules) {
						FrameRules.Show();
						FrameShow.Hide();
					} else {
						FrameRules.Hide();
						FrameShow.Show();
					}

					yield;

					// process events.
					foreach (Event in PendingEvents) {
						switch (Event.Type) {
							case CMlEvent::Type::MouseClick :
							{		
								if (Event.ControlId == "FrameRules") ShowRules = !ShowRules;
							}
					
							case CMlEvent::Type::KeyPress:
							{
								if (Event.CharPressed == "2424832") ShowRules = !ShowRules;	// F1
							}
						}
					}
				}
			}
		--></script>
		<frame posn="0 -70 0" id="FrameShow">
			<quad posn="0 0 10" sizen="140 20" halign="center" valign="center" style="Bgs1InRace" substyle="BgTitle3_5" />
			<label posn="0 0 11" scale="2" halign="center" valign="center" style="TextTitle3" text="Press F1 to show rules" />
		</frame>
		<frame posn="0 50 1" id="FrameRules">
			<frame posn="0 0 5">
				<quad posn="0 0 10" sizen="120 20" halign="center" valign="center" style="Bgs1InRace" substyle="BgTitle3_5" />
				<label posn="0 0 11" scale="2" halign="center" valign="center" style="TextTitle3" text="$fff{{{ ModeName }}}" />
			</frame>
			<frame posn="0 -10 5">
				<quad posn="0 0 10" sizen="300 120" halign="center" bgcolor="222c" />
				<label posn="-145 -5 11" sizen="145 5" scale="2" autonewline="1" style="TextCardSmallScores2" text="{{{ ModeRules }}}" />
			</frame>
		</frame>
	""";
	
	return ML;
}

main() {
	declare MatchNumber = 0;
		
	UseClans = True;
	Top::AddTop("Damages", 5);
	Top::AddTop("Capture", 5);
	
	declare LayerTops <=> UIManager.UILayerCreate();
	declare LayerRoundInfo <=> UIManager.UILayerCreate();
	
	while( !ServerShutdownRequested ) {
		LoadMap();
				
		Top::MatchBegin();
		Score::MatchBegin(False);	
		Airshot::MatchBegin();
		BalancedWeapons::MatchBegin();
		Victory::MatchBegin();
		if(AutoBalance) AutoTeamBalance();
		Ladder_OpenMatch_All();
		+++MatchBegin+++
		
		declare Round = 0;			
		
		UIManager.ResetAll();
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
		UIManager.UIAll.SendNotice(
			_("New match"), CUIConfig::ENoticeLevel::MatchInfo, 
			Null, CUIConfig::EAvatarVariant::Default, 
			CUIConfig::EUISound::StartRound, 0
		);
		
		ClanScores[1] = 0;
		ClanScores[2] = 0;	
		while( Victory::NoMatchWinner() && !MatchEndRequested ) 
		{				
			UIManager.ResetAll();
			UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
			
			declare Integer[Integer] HqScores = [1 => 0, 2 => 0];
			declare CSmBlockPole[] Poles;
			declare LastScoreTick = 0;
			declare NoNameCounter = 0;
			
			foreach(Pole in BlockPoles) {
				assert(Pole.Tag != "Spawn");
				Poles.add(Pole);
			
				Pole.Gauge.Value = 0;
				Pole.Gauge.Max = CaptureTime;
				Pole.Gauge.Clan = 0;
				if (GoalMarker)
				{
					if(Pole.Tag != "Goal")
					{
						UIManager.UIAll.Hud3dMarkers ^= """<marker label="{{{Pole.Tag}}}" pos="{{{ Pole.Position[0] }}} {{{ Pole.Position[1] + 25 }}} {{{ Pole.Position[2] }}}" />""";
					}
					else
					{
						NoNameCounter += 1;
						UIManager.UIAll.Hud3dMarkers ^= """<marker label="{{{Pole.Tag}}} #{{{TextLib::ToText(NoNameCounter)}}}" pos="{{{ Pole.Position[0] }}} {{{ Pole.Position[1] + 25 }}} {{{ Pole.Position[2] }}}" />""";
					}
				}
			}

			Score::RoundBegin();	
			Top::RoundBegin();
			Airshot::RoundBegin();
			BalancedWeapons::RoundBegin();
			Victory::RoundBegin();
			+++RoundBegin+++
				
			SM::SetupDefaultVisibility();

			declare LatestUITick = Now;
			StartTime = Now + RespawnTime;
			---EndTime---
			
			MapSidesIndices = [1=>(Round % 2)+1, 2=>2-(Round % 2)];
			G_BlockSpawnQueue = [1=>Ident[], 2=>Ident[]];
			UpdateBlockSpawnQueue(1);
			UpdateBlockSpawnQueue(2);
			
			for(Clan, 1, 2)
			{
				foreach(SpawnId in G_BlockSpawnQueue[MapSidesIndices[Clan]])
				{
					BlockSpawns[SpawnId].Base.Clan = Clan;
					BlockSpawns[SpawnId].Base.IsActive = True;
				}
			}
			
			while ( Victory::NoRoundWinner() && !MatchEndRequested ) {		
				yield;
												
				foreach(Event, PendingEvents) {	
					if( Event.Type == CSmModeEvent::EType::OnHit ) {				
						if ( Event.Shooter == Null || Event.Victim == Null || Event.Shooter == Event.Victim ) {
							Discard(Event);
						} else if ( UseClans && Event.Shooter.CurrentClan == Event.Victim.CurrentClan ) {
							Discard(Event);			
						} else {			
							if(Event.Damage > 0) {
								Score::AddPoints( Event.Shooter, DamageScore);									
								Top::IncrementPlayerPoints("Damages", Event.Shooter, DamageScore);
								Airshot::OnHit(Event.Shooter, Event.Victim);
							}
							PassOn(Event);
						}
					} else if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) {		
						BalancedWeapons::OnOut(Event.Shooter, Event.Victim);
						PassOn(Event);						
					} else if (Event.Type == CSmModeEvent::EType::OnCapture) {
						declare Pole <=> Event.BlockPole;
						foreach (PlayerId in Pole.Sector.PlayersIds)
						{
							declare Player <=> Players[PlayerId];
							
							if (Player.CurrentClan == Pole.Gauge.Clan)
							{
								Score::AddPoints( Player, CaptureScore);
								Top::IncrementPlayerPoints("Capture", Player, CaptureScore);
							}
						}
						PassOn(Event);						
					} else{
						PassOn(Event);
					}
				}

				SM::UnspawnPlayersChangingClan();
				+++Update+++	
								
				///////////////////////////////////////////////////
				// Shields 		
				foreach(Player in Players) {
					declare CaptureRatio for Player = .0;
					
					CaptureRatio = .0;
					Player.IsHighlighted = Player.Armor > 0;
				}
				///////////////////////////////////////////////////
				// Spawning players 		
				foreach(Player in Players) {
					if (Player.SpawnStatus != CSmPlayer::ESpawnStatus::NotSpawned) continue;														
					BalancedWeapons::SetPlayerWeapon(Player, True);
					_SpawnPlayer(Player, Now + RespawnTime);							
				}

				///////////////////////////////////////////////////
				// Capturing the Poles
				foreach(Pole in Poles)
				{
					declare Clan1Players = 0;
					declare Clan2Players = 0;
					foreach(PlayerId in Pole.Sector.PlayersIds)
					{
						declare Player <=> Players[PlayerId];
					
						if (Player.CurrentClan == 1)
						{
							Clan1Players += 1;
						}
						else
						{
							Clan2Players += 1;
						}
					}
					
					foreach(PlayerId in Pole.Sector.PlayersIds)
					{
						declare Player <=> Players[PlayerId];
						if (Clan1Players == Clan2Players || (Clan1Players > Clan2Players && Player.CurrentClan == 1) || (Clan1Players < Clan2Players && Player.CurrentClan == 2))
						{
							declare CaptureRatio for Player = .0;
							
							CaptureRatio = MathLib::ToReal(Pole.Gauge.Value) / MathLib::ToReal(Pole.Gauge.Max);
						}
						
					}
				
					if(Clan1Players > Clan2Players)
					{
						if(Pole.Gauge.Value > 0 && Pole.Gauge.Clan == 2)
						{
							Pole.Gauge.Speed = Clan2Players - Clan1Players;
						}
						else
						{
							Pole.Gauge.Clan = 1;
							Pole.Gauge.Speed = Clan1Players - Clan2Players;
						}
					}
					else if(Clan2Players > Clan1Players)
					{
						if(Pole.Gauge.Value > 0 && Pole.Gauge.Clan == 1)
						{
							Pole.Gauge.Speed = Clan1Players - Clan2Players;
						}
						else
						{
							Pole.Gauge.Clan = 2;
							Pole.Gauge.Speed = Clan2Players - Clan1Players;
						}
					}
					else
					{
						Pole.Gauge.Speed = 0;
					}
					
					if(Pole.Gauge.Value >= Pole.Gauge.Max && Now >= LastScoreTick + ScoreTickTime)
					{
						HqScores[Pole.Gauge.Clan] += ScorePerTick;
					
						if(HqScores[Pole.Gauge.Clan] >= ScoreLimit && ScoreLimit > 0)
						{
							Victory::SetRoundWinnerIfNoWinner(Pole.Gauge.Clan);
						}
					}
				}
				
				if (Now >= LastScoreTick + ScoreTickTime)
				{
					LastScoreTick = Now;
				}
				
				///////////////////////////////////////////////////
				// Victory	
				if(Now >= EndTime) {
					if (HqScores[1] > HqScores[2])
					{
						Victory::SetRoundWinnerIfNoWinner(0);
					}
					else if (HqScores[2] > HqScores[1])
					{
						Victory::SetRoundWinnerIfNoWinner(1);
					}
					else
					{
						Victory::SetRoundDrawIfNoWinner();
					}
				}
				
				///////////////////////////////////////////////////
				// UI				
				if ( Now > LatestUITick + UITickPeriod){
					LatestUITick = Now;	
					
					declare ClanTotalRatios = [1=>0, 2=>0];
					declare ClanTotalWidth = [1=>0, 2=>0];
					for (Clan, 1, 2)
					{
						ClanTotalRatios[Clan] = (HqScores[Clan] * 100) / ScoreLimit ;
						ClanTotalWidth[Clan] = ClanTotalRatios[Clan] / 2;
					}
					declare Text ScoreTeam1 = Teams[0].ColorText^ClanTotalRatios[1]^"%";
					declare Text ScoreTeam2 = Teams[1].ColorText^ClanTotalRatios[2]^"%";
					LayerRoundInfo.ManialinkPage = """<quad posn="0 60 0" sizen="140 15" halign="center" valign="center" style="Bgs1InRace" substyle="BgTitle3_1" />
					<label posn="-60 60 1" halign="center" valign="center" text="{{{ScoreTeam1}}}" /><label posn="60 60" halign="center" valign="center" text="{{{ScoreTeam2}}}" />
					<quad posn="-50 60 2" sizen="{{{ClanTotalWidth[1]}}} 10" halign="left" valign="center" style="ProgressBarSmall" substyle="BgWindow3" />
					<quad posn="50 60 2" sizen="{{{ClanTotalWidth[2]}}} 10" halign="right" valign="center" style="ProgressBarSmall" substyle="BgWindow3" />
					<quad posn="0 60 1" sizen="2 15" halign="center" valign="center" style="Bgs1InRace" substyle="BgWindow2" />
					<label posn="160 -90" valign="bottom" halign="right" scale="0.5">V. {{{VersionNum}}}</label>""";
					
					LayerRoundInfo.ManialinkPage ^= """<quad style="BgsPlayerCard" substyle="BgCard" posn="-150 80" sizen="60 {{{Poles.count * 8}}} + 10" halign="left" valign="top" />""";
					declare VPos = 77.5;
					declare Text[] AddTexts = Text[];
					declare PoleCounter = [ 1 => 0, 2 => 0];
					declare NoNameCounter = 0;
					foreach(Pole in Poles)
					{
						declare InfoText = TextLib::ToText(MathLib::FloorInteger(MathLib::ToReal(Pole.Gauge.Value) / MathLib::ToReal(Pole.Gauge.Max) * 100)) ^ " %";
						if(Pole.Gauge.Clan == 1)
						{
							InfoText = "$00f" ^ InfoText;
						}
						else if(Pole.Gauge.Clan == 2)
						{
							InfoText = "$f00" ^ InfoText;
						}
						
						if(Pole.Gauge.Value >= Pole.Gauge.Max)
						{
							PoleCounter[Pole.Gauge.Clan] += 1;
						}
						if(Pole.Tag != "Goal")
						{
							AddTexts.add("""{{{Pole.Tag}}}</label><label halign="left" valign="top" posn="40 0">{{{InfoText}}}</label></frame>""");
						}
						else
						{
							NoNameCounter += 1;
							AddTexts.add("""{{{Pole.Tag}}} #{{{TextLib::ToText(NoNameCounter)}}}</label><label halign="left" valign="top" posn="40 0">{{{InfoText}}}</label></frame>""");
						}
					}
					
					foreach(AddText in AddTexts.sort())
					{
						LayerRoundInfo.ManialinkPage ^= """<frame posn="-145 {{{TextLib::ToText(VPos)}}}"><label halign="left" valign="top" posn="0 0">{{{AddText}}}""";
						VPos -= 8;
					}
					
					LayerRoundInfo.ManialinkPage ^= """<quad style="BgsPlayerCard" substyle="BgCardSystem" posn="-115 {{{TextLib::ToText(VPos + 2)}}}" sizen="18 8" halign="center" valign="top" />""";
					
					LayerRoundInfo.ManialinkPage ^= """<label posn="-115 {{{TextLib::ToText(VPos)}}}" halign="center" valign="top">$s$00f{{{TextLib::ToText(PoleCounter[1])}}} $fff - $f00{{{TextLib::ToText(PoleCounter[2])}}}</label>""";
					
					if(((Now - StartTime) / 8000) % 2 == 0) 
						LayerTops.ManialinkPage = Top::GetFrameTop("Capture", _("Top 5 Targets"), "130 -30", "");
					else 
						LayerTops.ManialinkPage = Top::GetFrameTop("Damages", _("Top 5 Score"), "130 -30", "");
					
					UIManager.UIAll.UILayers.clear();
					UIManager.UIAll.UILayers.add(LayerTops);
					UIManager.UIAll.UILayers.add(LayerRoundInfo);  
										
					declare PlayerClan1Id = NullId;
					declare PlayerClan2Id = NullId;
					foreach(Player in Players) {
						if(PlayerClan1Id == NullId && Player.CurrentClan == 1) PlayerClan1Id = Player.Id;
						if(PlayerClan2Id == NullId && Player.CurrentClan == 2) PlayerClan2Id = Player.Id;
						if(PlayerClan1Id != NullId && PlayerClan2Id != NullId) break;
					}
					
					if(PlayerClan1Id != NullId && PlayerClan2Id != NullId) {
						UIManager.UIAll.OverlayScoreSummary = True;
						UIManager.UIAll.ScoreSummary_Player1 = PlayerClan1Id;
						UIManager.UIAll.ScoreSummary_Points1 = ClanScores[1];
						UIManager.UIAll.ScoreSummary_MatchPoints1 = -1;
						UIManager.UIAll.ScoreSummary_Gauge1 = ClanTotalRatios[1]/100.;
						UIManager.UIAll.ScoreSummary_Player2 = PlayerClan2Id;
						UIManager.UIAll.ScoreSummary_Points2 = ClanScores[2];
						UIManager.UIAll.ScoreSummary_MatchPoints2 = -1;
						UIManager.UIAll.ScoreSummary_Gauge2 = ClanTotalRatios[2]/100.;
					} else {
						UIManager.UIAll.OverlayScoreSummary = False;
					}
					
					declare UsedLayers = Ident[];
					foreach(Player in Players) {
						declare UI <=> UIManager.GetUI(Player);
						if (UI==Null) continue;
						
						declare CaptureRatio for Player = 0.;
						if(0. < CaptureRatio && CaptureRatio < 1.) {
							UI.GaugeRatio = CaptureRatio;
							UI.GaugeMessage = _("Capturing...");
							UI.GaugeClan = Player.CurrentClan;
						} else if (CaptureRatio == 1.) {
							UI.GaugeRatio = 1.;
							UI.GaugeMessage = _("Pole captured.");
							UI.GaugeClan = Player.CurrentClan;						
						} else {
							UI.GaugeRatio = -1.;
							UI.GaugeMessage = "";
							UI.GaugeClan = 0;
						}
						
						declare CUILayer LayerSpawnScreen;
						if (UI.UILayers.count != 1) {
							LayerSpawnScreen <=> UIManager.UILayerCreate();
							LayerSpawnScreen.Type = CUILayer::EUILayerType::ScreenIn3d;
							UI.UILayers.add(LayerSpawnScreen);
						} else {
							LayerSpawnScreen <=> UI.UILayers[0];
						}
						UsedLayers.add(LayerSpawnScreen.Id);
						LayerSpawnScreen.ManialinkPage = UpdateLayerSpawnScreen();
						
						+++UIPlayer+++
					}
					+++UIAll+++	
					// Remove layers
					declare LayersToRemove = Ident[];
					UsedLayers.add(LayerTops.Id);UsedLayers.add(LayerRoundInfo.Id);
					foreach (Layer in UIManager.UILayers) {
						if (!UsedLayers.exists(Layer.Id)) {
							LayersToRemove.add(Layer.Id);
						}
					}
					foreach (LayerId in LayersToRemove) {
						UIManager.UILayerDestroy(UIManager.UILayers[LayerId]);
					}		
				}
				///////////////////////////////////////////////////				
			}

			///////////////////////////////////////////////////	
			// end round sequence	
			StartTime = -1;
			EndTime = -1;
		
		
			LayerTops.ManialinkPage = 
				Top::GetFrameTop("Capture", _("Top 5 Targets"), "130 0", "") ^
				Top::GetFrameTop("Damages", _("Top 5 Score"), "130 -30", "");
			UIManager.UIAll.UILayers.clear();
			UIManager.UIAll.UILayers.add(LayerTops);

			foreach(Player in Players) {
				declare UI <=> UIManager.GetUI(Player);
				if (UI==Null) continue;
				UI.BigMessage = "";
			}
			
			sleep(1700);
			UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
			if ( Victory::IsRoundWinner(1) ) {
				UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the round!"), Teams[0].ColorizedName);	
				Clan1Score += 1;			
			} else if ( Victory::IsRoundWinner(2) ) {
				UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the round!"), Teams[1].ColorizedName);
				Clan2Score += 1;
			} else {
				UIManager.UIAll.BigMessage = _("Draw round");
			}
			
			Victory::SetMatchWinnerFromScore(RoundsToWin, RoundGapToWin, RoundsLimit);
			
			UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;					
			
			foreach(Player in Players) {									
				UnspawnPlayer(Player);					
			}			
			sleep(3*1000);
			
			
			/*LayerTops.ManialinkPage = 
				Top::GetFrameTop("Capture", _("Top 5 Targets"), "130 40", "Percent") ^
				Top::GetFrameTop("Damages", _("Top 5 Score"), "130 -10", "");*/
			UIManager.UIAll.UILayers.clear();
			UIManager.UIAll.UILayers.add(LayerTops);

			sleep(4*1000);
						
			+++RoundEnd+++	
			Score::RoundEnd();			
			Top::RoundEnd();
			Airshot::RoundEnd();
			BalancedWeapons::RoundEnd();
			Victory::RoundEnd();	
			
			Round += 1;			
		}

		///////////////////////////////////////////////////	
		// end match sequence					
			
		UIManager.ResetAll();
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Outro;
		
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
		declare WinnerClan = -1;
		if ( Victory::IsMatchWinner(1) ) {
			UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the match!"), Teams[0].ColorizedName);
			WinnerClan = 1;
		} else if (  Victory::IsMatchWinner(2) ) {
			UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the match!"), Teams[1].ColorizedName);
			WinnerClan = 2;
		}
		MatchNumber += 1;
				
		sleep(6*1000);
		
		if(WinnerClan != -1)
		{
			// Reset score clans
			foreach (Score in Scores) { declare Integer Clan for Score; Clan = 0; }	
			foreach (Player in Players) {
				if (Player.Score == Null) continue;
				declare Integer Clan for Player.Score;
				Clan = Player.CurrentClan;				
			}
			// Sort scores by clan
			declare ClanScoresSorted = [1=>CSmScore[], 2=>CSmScore[]];	
			foreach (Score in Scores) {
				Score.LadderRankSortValue = 1000;
				declare Integer Clan for Score;
				if (Clan != 1 && Clan != 2) continue;
				ClanScoresSorted[Clan].add(Score);				
			}	
			declare Shift = [1=>1, 2=>1];
			Shift[3 - WinnerClan] = 2;			
			foreach(Index => Score in ClanScoresSorted[1]) {Score.LadderRankSortValue = Index * 2 + Shift[1];}
			foreach(Index => Score in ClanScoresSorted[2]) {Score.LadderRankSortValue = Index * 2 + Shift[2];}			
			
			Ladder_CloseMatch();
		} 
		else {
			Ladder_CancelMatch();
		}
		
		+++MatchEnd+++
		Score::MatchEnd();
		Top::MatchEnd();	
		Airshot::MatchEnd();
		BalancedWeapons::MatchEnd();
		Victory::MatchEnd();	
		
		UIManager.UIAll.BigMessage = "";
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;				
		
		sleep(10*1000);

		UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
		UIManager.UIAll.UILayers.clear();

		sleep(1*1000);
			
		MatchEndRequested = False;

		UnloadMap();
	}
	
	UIManager.UILayerDestroy(LayerTops);
	UIManager.UILayerDestroy(LayerRoundInfo);
}