#Include "TextLib" as TextLib

declare Text[Text][Text] Translations;
declare Text DefaultLang;

Void AddTranslation(Text _Name, Text _Lang, Text _Translation)
{
	if( !Translations.existskey(_Lang))
	{
		Translations[_Lang] = Text[Text];
	}
	Translations[_Lang][_Name] = _Translation;
}

Text GetTranslation(Text _Name, Text _Lang)
{
	if (Translations.existskey(_Lang) && Translations[_Lang].existskey(_Name))
	{
		return Translations[_Lang][_Name];
	}
	else if (Translations.existskey(DefaultLang) && Translations[DefaultLang].existskey(_Name))
	{
		return Translations[DefaultLang][_Name];
	}
	return _Name;
}

Void SetDefaultLang(Text _Lang)
{
	DefaultLang = _Lang;
}

Text GetUserTranslation(Text _Name, CUser _User)
{
	return GetTranslation(_Name, _User.Language);
}

Void SendNotice(Text _Text, CUIConfig::ENoticeLevel _NoticeLevel, CUser _User, CUIConfig::EAvatarVariant _Avatar, CUIConfig::EUISound _Sound, Integer _SoundVariant, Text _Replace1, Text _Replace2)
{
	foreach(Player in Players)
	{
		if(Player.IsFakePlayer) continue;
		declare UI <=> UIManager.GetUI(Player);
		UI.SendNotice(TextLib::Compose(GetUserTranslation(_Text, Player.User), _Replace1, _Replace2) , _NoticeLevel, _User, _Avatar, _Sound, _SoundVariant);
	}
	
	foreach(Spectator in Spectators)
	{
		if(Spectator.IsFakePlayer) continue;
		declare UI <=> UIManager.GetUI(Spectator);
		UI.SendNotice(TextLib::Compose(GetUserTranslation(_Text, Spectator.User), _Replace1, _Replace2) , _NoticeLevel, _User, _Avatar, _Sound, _SoundVariant);
	}
}

Void Init()
{
	SetDefaultLang("en");
	Translations = Text[Text][Text];
}